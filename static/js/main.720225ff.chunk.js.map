{"version":3,"sources":["components/Calculator.jsx","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","sum","sumLast","num","numLast","decimal","classActive","buttonArr","handleClick","value","console","log","isItOperator","item","setState","prevState","length","substring","parseFloat","eval","replace","toFixed","toString","indexOf","toggleClass","currentState","className","this","onClick","id","map","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.720225ff.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../App.css\";\n\nclass Calculator extends Component {\n  state = {\n    sum: \"\",\n    sumLast: \"\",\n    num: \"0\",\n    numLast: \"0\",\n    decimal: \"false\",\n    classActive: true //for class toggle\n  };\n\n  buttonArr = [\n    [\"clear\", \"AC\"],\n    [\"clearJustTheLastOne\", \"C\"],\n    [\"seven\", \"7\"],\n    [\"eight\", \"8\"],\n    [\"nine\", \"9\"],\n    [\"divide\", \"/\"],\n    [\"four\", \"4\"],\n    [\"five\", \"5\"],\n    [\"six\", \"6\"],\n    [\"multiply\", \"X\"],\n    [\"one\", \"1\"],\n    [\"two\", \"2\"],\n    [\"three\", \"3\"],\n    [\"subtract\", \"-\"],\n    [\"zero\", \"0\"],\n    [\"decimal\", \".\"],\n    [\"equals\", \"=\"],\n    [\"add\", \"+\"]\n  ];\n\n  handleClick = value => {\n    //helper function to distinguish operator from not operator\n    console.log(value);\n    const isItOperator = item => {\n      switch (item) {\n        case \"/\":\n        case \"X\":\n        case \"+\":\n        case \"-\":\n          return \"operator\";\n        default:\n          return \"not operator\";\n      }\n    };\n\n    switch (value) {\n      case \"AC\":\n        this.setState({\n          sum: \"\",\n          sumLast: \"\",\n          num: \"0\",\n          numLast: \"0\",\n          decimal: \"false\"\n        });\n        break;\n      case \"C\":\n        if (this.state.sumLast === \"=\") {\n          this.setState({\n            sum: \"\",\n            sumLast: \"\",\n            num: \"0\",\n            numLast: \"0\",\n            decimal: \"false\"\n          });\n        } else {\n          this.setState({\n            num: \"0\",\n            numLast: \"0\",\n            decimal: \"false\"\n          });\n        }\n\n        break;\n      case \"0\":\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        // If num is 0 override it, otherwise add the number to it\n        if (this.state.numLast !== \"=\") {\n          if (this.state.num === \"0\") {\n            this.setState({\n              num: value,\n              numLast: value\n            });\n          } else {\n            this.setState(prevState => {\n              return {\n                num: prevState.num + value,\n                numLast: value\n              };\n            });\n          }\n        }\n        break;\n      case \".\":\n        // adds . to the number if it hasnt got any -->\n        if (this.state.decimal === \"false\") {\n          if (this.state.num === \"\" || this.state.num === \"0\") {\n            this.setState({\n              num: \"0.\",\n              numLast: \".\",\n              decimal: \"true\"\n            });\n          } else if (this.state.num === \"-\") {\n            this.setState({\n              num: \"-0.\",\n              numLast: \".\",\n              decimal: \"true\"\n            });\n          } else {\n            this.setState(prevState => {\n              return {\n                num: prevState.num + value,\n                numLast: value,\n                decimal: \"true\"\n              };\n            });\n          }\n        }\n        break;\n      case \"/\":\n      case \"X\":\n      case \"+\":\n      case \"-\":\n        // special case when the user pressed = and then operator\n        if (this.state.numLast === \"=\") {\n          this.setState(prevState => {\n            return {\n              sum: prevState.num + value,\n              sumLast: value,\n              num: \"0\",\n              numLast: \"0\",\n              decimal: \"false\"\n            };\n          });\n          // if num exists, push the number to sum and num=operator\n        } else if (\n          isItOperator(this.state.numLast) !== \"operator\" &&\n          this.state.num.length &&\n          this.state.num !== \"0\"\n        ) {\n          this.setState(prevState => {\n            return {\n              sum: prevState.sum + prevState.num + value,\n              sumLast: value,\n              num: \"0\",\n              numLast: \"0\",\n              decimal: \"false\"\n            };\n          });\n          // if operator and minus -->\n        } else if (\n          this.state.sumLast === \"-\" &&\n          isItOperator(\n            this.state.sum.substring(\n              this.state.sum.length - 2,\n              this.state.sum.length - 1\n            )\n          ) === \"operator\"\n        ) {\n          this.setState(prevState => {\n            return {\n              sum: prevState.sum.substring(0, prevState.sum.length - 2) + value,\n              sumLast: value,\n              num: \"0\",\n              numLast: \"0\",\n              decimal: \"false\"\n            };\n          });\n          //if multiple operators -->\n        } else if (\n          this.state.num === \"0\" &&\n          isItOperator(this.state.sumLast) === \"operator\"\n        ) {\n          if (value === \"-\") {\n            this.setState(prevState => {\n              return {\n                sum: prevState.sum + value,\n                sumLast: value,\n                num: \"0\",\n                numLast: \"0\",\n                decimal: \"false\"\n              };\n            });\n          } else {\n            this.setState(prevState => {\n              return {\n                sum:\n                  prevState.sum.substring(0, prevState.sum.length - 1) + value,\n                sumLast: value,\n                num: \"0\",\n                numLast: \"0\",\n                decimal: \"false\"\n              };\n            });\n          }\n        }\n        break;\n\n      case \"=\":\n        if (this.state.sumLast !== \"=\") {\n          if (this.state.num && this.state.num !== \"0\") {\n            // if the last element of num is number\n            this.setState(prevState => {\n              return {\n                sum: prevState.sum + prevState.num + \"=\",\n                sumLast: \"=\",\n                num: parseFloat(\n                  eval(\n                    (prevState.sum + prevState.num)\n                      .replace(\"X\", \"*\")\n                      .replace(\"--\", \"+\")\n                  ).toFixed(6)\n                ).toString(),\n                numLast: \"=\",\n                decimal:\n                  eval(\n                    (prevState.sum + prevState.num)\n                      .replace(\"X\", \"*\")\n                      .replace(\"--\", \"+\")\n                  )\n                    .toString()\n                    .indexOf(\".\") === \"-1\"\n                    ? \"false\"\n                    : \"true\"\n              };\n            });\n            // if the last element of num is operator\n          } else {\n            this.setState(prevState => {\n              return {\n                sum: prevState.sum.substring(0, prevState.sum.length - 1) + \"=\",\n                sumLast: \"=\",\n                num: parseFloat(\n                  eval(\n                    prevState.sum\n                      .substring(0, prevState.sum.length - 1)\n                      .replace(\"X\", \"*\")\n                      .replace(\"--\", \"+\")\n                  ).toFixed(6)\n                ).toString(),\n                numLast: \"=\",\n                decimal:\n                  eval(\n                    prevState.sum\n                      .substring(0, prevState.sum.length - 1)\n                      .replace(\"X\", \"*\")\n                      .replace(\"--\", \"+\")\n                  )\n                    .toString()\n                    .indexOf(\".\") === \"-1\"\n                    ? \"false\"\n                    : \"true\"\n              };\n            });\n          }\n        }\n        break;\n      default:\n        break;\n    }\n  };\n  toggleClass = () => {\n    const currentState = this.state.classActive;\n    this.setState({ classActive: !currentState });\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"holder-background\">\n          <div\n            className={this.state.classActive ? \"holder\" : \"holder holderOpen\"}\n            onClick={this.toggleClass}\n          >\n            <div className=\"text-box\">\n              <p>Calculator</p>\n            </div>\n          </div>\n          <div className=\"main-calculator\">\n            <div className=\"display-box\">\n              <div className=\"sum-div\">\n                <div className=\"sum-overflow\">\n                  <div className=\"sum\">{this.state.sum}</div>\n                </div>\n              </div>\n              <div className=\"display-div\">\n                <div className=\"sum-overflow\">\n                  <div id=\"display\">{this.state.num}</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"buttons\">\n              {this.buttonArr.map(item => {\n                return (\n                  <button\n                    id={item[0]}\n                    key={this.buttonArr.indexOf(item)}\n                    onClick={() => this.handleClick(item[1])}\n                  >\n                    {item[1]}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Calculator from \"./components/Calculator\";\n\nfunction App() {\n  return <Calculator />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}